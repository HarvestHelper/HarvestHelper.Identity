# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CIDC

on:
  push:
    branches: [ "main" ]

jobs:

  generate-version:
    runs-on: ubuntu-latest
  
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3   
    
    - name: Github Tag Bump
      id: tab_bump
      uses: anothrNick/github-tag-action@1.65.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     
        INITIAL_VERSION: 1.0.12
        DEFAULT_BUMP: patch
        
    outputs:
      new_version: ${{ steps.tab_bump.outputs.new_tag }}

  build-and-deploy-service:

    runs-on: ubuntu-latest
    needs: generate-version

    env:
      APP_NAME: harvesthelper
      SERVICE_NAME: identity
      HELM_CHART_VERSION: 0.1.0
      
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: Azure/login@v1.4.6
      with:
        # ClientId of the Azure Service principal created.
        client-id: ${{secrets.AZURE_CLIENT_ID}}
        # TenantId of the Azure Service principal created.
        tenant-id: ${{secrets.AZURE_TENANT_ID}}
        # Azure subscriptionId
        subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
        
    - name: Login to container registry
      run: az acr login --name ${{env.APP_NAME}}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v4.0.0
      with:
        secrets: |
          "GH_OWNER=${{github.repository_owner}}"
          "GH_PAT= ${{secrets.GH_PAT}}"
        tags: ${{env.APP_NAME}}.azurecr.io/harvesthelper.identity:${{ needs.generate-version.outputs.new_version }}
        push: true
        
    - name: Get AKS Credentials
      run: az aks get-credentials --resource-group ${{env.APP_NAME}} --name ${{env.APP_NAME}}
      
    - name: Helm tool installer
      uses: Azure/setup-helm@v3.5
      with:
        # GitHub token. Required only if 'version' == 'latest'
        token: ${{ secrets.GITHUB_TOKEN }} 
        
    - name: Login to Helm registry
      run: |
        helmUser="00000000-0000-0000-0000-000000000000"
        helmPassword=$(az acr login --name ${{env.APP_NAME}} --expose-token --output tsv --query accessToken) 
        helm registry login ${{env.APP_NAME}}.azurecr.io --username $helmUser --password $helmPassword
        
    - name: Deploy Helm Chart
      run: |
        helm upgrade ${{env.SERVICE_NAME}}-service oci://${{env.APP_NAME}}.azurecr.io/helm/microservice --version ${{env.HELM_CHART_VERSION}} -f helm/values.yaml -n ${{env.SERVICE_NAME}} --set image.tag=${{needs.generate-version.outputs.new_version}} --install --wait
  
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"HarvestHelper_HarvestHelper.Identity" /o:"harvesthelper" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          cd .\src\HarvestHelper.Identity.Service\
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
